====================================
GENERAL
====================================
Set up a new git directory
  git init
Clone an existing remote repository
  git clone https://github.com/marklomas60/test


Amend a commit
  git commit -m 'initial commit'
  git add forgotten_file
  git commit --amend -m 'New commit message'
This removes the last commit from the branch, though it
will not be deleted ie. it still exists in 'objects'.


====================================
BRANCHES
====================================
Maek a new branch
  git branch [branch_name]
Make a new branch and move to it
  git checkout -b [branch_name]
Switch branch
  git checkout [branch_name]
View branches
  git branch

Delete a branch
Locally
  git branch -d [branch_name]
Remote
  git push origin :[branch_name]


====================================
INFO
====================================
Look at the history of commits
  git log
See branches
  git branch -v
See configuration
  git config --list


====================================
MERGING
====================================
To merge a branch with the master, 
move to the master and type
  git merge [branch_name]
See whats available
  git mergetool --tool-help
Install one that currently unavailable in linux
  sudo apt-get install kdiff3
Use a particular mergetool
  git mergetool -t [kdiff3]
Set up default mergetool
  git config --global merge.tool [kdiff3]
Use default mergetool
  git mergetool
Set up gitk for viewing merging/commit history
  sudo apt-get install gitk

To merge a branch with master.
  1. Commit on your branch.
  1. Switch branch to master
  2. Merge branch
       git merge branch
     If confilicts then use the mergetool to resolve
       git mergetool 
  3. Add and commit then push.
       git add -A           % think a slight shortcut is 'git add .'
       git commit -m 'New stuff'
       git push


====================================
CONFIG
====================================
See settings
  git config --list
  git config --global user.name [markus]
  git config --global user.email [markus@gmail.com]
  git config --global core.editor [gedit]
  git config --global merge.tool [kdiff3]

====================================
CREDENTIALS
====================================
To store username and password in plain text locally.
  git config credential.helper store
Then do a push and the [username] and [password] will be stored
in plain text in probably $HOME/.git-credentials.
ie
https://[username]:[password]%21-2@github.com
not sure what the '21-2' is about???

The credentials are stored in a file called .git-credentials which
can be found in ~/.git-credentials by default or 
$HOME/.config/git/credentials.


====================================
STAGING AREA
====================================
There is only one staging area which is defined by the file .git/index.
The file gets contians a time stamp, file mode, hash, integer, and the
filename of the files being staged. The integer is generally 0, but if
say there was a merge conflict with file1 then there might be three
entries named file1 with integer=1,2 and 3.
The index file gets updated with a 'git add' or switching branch or a 
'git commit' etc.

List tracked/staged files
  git ls-tree [branch_name]
  git ls-files
  git ls-files --stage


====================================
PLUMBING
====================================
The objects directory stores all the content for your
database (blobs, trees and commits), the refs directory stores 
pointers into commit objects in that data (branches, tags, remotes 
and more), the HEAD file points to the branch you currently have 
checked out, and the index file is where Git stores 
your staging area information.

  $ find .git/objects -type f
  .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
  $ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4
  test content

Tree objects map the hashes to the filenames
  $ git cat-file -p master^{tree}
  tree
  $ git cat-file -p master^{tree}
  100644 blob a906cb2a4a904a152e80877d4088654daad0c859 README
  100644 blob 8f94139338f9404f26296befa88755fc2598c289 Rakefile
  040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0 lib

Commits contain meta-data and a pointer to a tree object,
which is the snapshot.

Look at latest commits
  ls .git/objects/*/* -lt | head 5
  git cat-file -t dd3e
  git cat-file -p dd3e



====================================
REMOTE REPOSITORY
====================================
To push a branch you need to include the remote and the branch in the 
push.
  git push origin [branch_name]

Add a remote
  git remote add origin https://github.com/marklomas60/test

Add a progect to git hub. Initialise git. Add a remote as above.
Though, of course this only works if the repo exists. I don't know
how to create one remotely from the command line.
  git push --set-upstream origin master





